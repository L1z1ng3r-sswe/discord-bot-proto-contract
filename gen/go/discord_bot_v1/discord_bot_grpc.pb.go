// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: discord_bot.proto

package discord_bot_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiscordBotClient is the client API for DiscordBot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscordBotClient interface {
	CreateTournament(ctx context.Context, in *CreateTournamentRequest, opts ...grpc.CallOption) (*CreateTournamentResponse, error)
	AddModerator(ctx context.Context, in *AddModeratorRequest, opts ...grpc.CallOption) (*AddModeratorResponse, error)
	DeleteTournament(ctx context.Context, in *DeleteTournamentRequest, opts ...grpc.CallOption) (*DeleteTournamentResponse, error)
	AddServers(ctx context.Context, in *AddServersRequest, opts ...grpc.CallOption) (*AddServersResponse, error)
}

type discordBotClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscordBotClient(cc grpc.ClientConnInterface) DiscordBotClient {
	return &discordBotClient{cc}
}

func (c *discordBotClient) CreateTournament(ctx context.Context, in *CreateTournamentRequest, opts ...grpc.CallOption) (*CreateTournamentResponse, error) {
	out := new(CreateTournamentResponse)
	err := c.cc.Invoke(ctx, "/discord_bot_v1.DiscordBot/CreateTournament", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordBotClient) AddModerator(ctx context.Context, in *AddModeratorRequest, opts ...grpc.CallOption) (*AddModeratorResponse, error) {
	out := new(AddModeratorResponse)
	err := c.cc.Invoke(ctx, "/discord_bot_v1.DiscordBot/AddModerator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordBotClient) DeleteTournament(ctx context.Context, in *DeleteTournamentRequest, opts ...grpc.CallOption) (*DeleteTournamentResponse, error) {
	out := new(DeleteTournamentResponse)
	err := c.cc.Invoke(ctx, "/discord_bot_v1.DiscordBot/DeleteTournament", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordBotClient) AddServers(ctx context.Context, in *AddServersRequest, opts ...grpc.CallOption) (*AddServersResponse, error) {
	out := new(AddServersResponse)
	err := c.cc.Invoke(ctx, "/discord_bot_v1.DiscordBot/AddServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscordBotServer is the server API for DiscordBot service.
// All implementations must embed UnimplementedDiscordBotServer
// for forward compatibility
type DiscordBotServer interface {
	CreateTournament(context.Context, *CreateTournamentRequest) (*CreateTournamentResponse, error)
	AddModerator(context.Context, *AddModeratorRequest) (*AddModeratorResponse, error)
	DeleteTournament(context.Context, *DeleteTournamentRequest) (*DeleteTournamentResponse, error)
	AddServers(context.Context, *AddServersRequest) (*AddServersResponse, error)
	mustEmbedUnimplementedDiscordBotServer()
}

// UnimplementedDiscordBotServer must be embedded to have forward compatible implementations.
type UnimplementedDiscordBotServer struct {
}

func (UnimplementedDiscordBotServer) CreateTournament(context.Context, *CreateTournamentRequest) (*CreateTournamentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTournament not implemented")
}
func (UnimplementedDiscordBotServer) AddModerator(context.Context, *AddModeratorRequest) (*AddModeratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddModerator not implemented")
}
func (UnimplementedDiscordBotServer) DeleteTournament(context.Context, *DeleteTournamentRequest) (*DeleteTournamentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTournament not implemented")
}
func (UnimplementedDiscordBotServer) AddServers(context.Context, *AddServersRequest) (*AddServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddServers not implemented")
}
func (UnimplementedDiscordBotServer) mustEmbedUnimplementedDiscordBotServer() {}

// UnsafeDiscordBotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscordBotServer will
// result in compilation errors.
type UnsafeDiscordBotServer interface {
	mustEmbedUnimplementedDiscordBotServer()
}

func RegisterDiscordBotServer(s grpc.ServiceRegistrar, srv DiscordBotServer) {
	s.RegisterService(&DiscordBot_ServiceDesc, srv)
}

func _DiscordBot_CreateTournament_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTournamentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordBotServer).CreateTournament(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discord_bot_v1.DiscordBot/CreateTournament",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordBotServer).CreateTournament(ctx, req.(*CreateTournamentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscordBot_AddModerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddModeratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordBotServer).AddModerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discord_bot_v1.DiscordBot/AddModerator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordBotServer).AddModerator(ctx, req.(*AddModeratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscordBot_DeleteTournament_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTournamentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordBotServer).DeleteTournament(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discord_bot_v1.DiscordBot/DeleteTournament",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordBotServer).DeleteTournament(ctx, req.(*DeleteTournamentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscordBot_AddServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordBotServer).AddServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discord_bot_v1.DiscordBot/AddServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordBotServer).AddServers(ctx, req.(*AddServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiscordBot_ServiceDesc is the grpc.ServiceDesc for DiscordBot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscordBot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "discord_bot_v1.DiscordBot",
	HandlerType: (*DiscordBotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTournament",
			Handler:    _DiscordBot_CreateTournament_Handler,
		},
		{
			MethodName: "AddModerator",
			Handler:    _DiscordBot_AddModerator_Handler,
		},
		{
			MethodName: "DeleteTournament",
			Handler:    _DiscordBot_DeleteTournament_Handler,
		},
		{
			MethodName: "AddServers",
			Handler:    _DiscordBot_AddServers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discord_bot.proto",
}
