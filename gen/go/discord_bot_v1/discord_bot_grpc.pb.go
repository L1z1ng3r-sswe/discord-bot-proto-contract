// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: discord_bot.proto

package discord_bot_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TournamentsClient is the client API for Tournaments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TournamentsClient interface {
	CreateTournament(ctx context.Context, in *CreateTournamentRequest, opts ...grpc.CallOption) (*CreateTournamentResponse, error)
	DeleteTournament(ctx context.Context, in *DeleteTournamentRequest, opts ...grpc.CallOption) (*DeleteTournamentResponse, error)
	GetChannelURL(ctx context.Context, in *GetChannelURLRequest, opts ...grpc.CallOption) (*GetChannelURLResponse, error)
}

type tournamentsClient struct {
	cc grpc.ClientConnInterface
}

func NewTournamentsClient(cc grpc.ClientConnInterface) TournamentsClient {
	return &tournamentsClient{cc}
}

func (c *tournamentsClient) CreateTournament(ctx context.Context, in *CreateTournamentRequest, opts ...grpc.CallOption) (*CreateTournamentResponse, error) {
	out := new(CreateTournamentResponse)
	err := c.cc.Invoke(ctx, "/tournaments_v1.Tournaments/CreateTournament", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentsClient) DeleteTournament(ctx context.Context, in *DeleteTournamentRequest, opts ...grpc.CallOption) (*DeleteTournamentResponse, error) {
	out := new(DeleteTournamentResponse)
	err := c.cc.Invoke(ctx, "/tournaments_v1.Tournaments/DeleteTournament", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentsClient) GetChannelURL(ctx context.Context, in *GetChannelURLRequest, opts ...grpc.CallOption) (*GetChannelURLResponse, error) {
	out := new(GetChannelURLResponse)
	err := c.cc.Invoke(ctx, "/tournaments_v1.Tournaments/GetChannelURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TournamentsServer is the server API for Tournaments service.
// All implementations must embed UnimplementedTournamentsServer
// for forward compatibility
type TournamentsServer interface {
	CreateTournament(context.Context, *CreateTournamentRequest) (*CreateTournamentResponse, error)
	DeleteTournament(context.Context, *DeleteTournamentRequest) (*DeleteTournamentResponse, error)
	GetChannelURL(context.Context, *GetChannelURLRequest) (*GetChannelURLResponse, error)
	mustEmbedUnimplementedTournamentsServer()
}

// UnimplementedTournamentsServer must be embedded to have forward compatible implementations.
type UnimplementedTournamentsServer struct {
}

func (UnimplementedTournamentsServer) CreateTournament(context.Context, *CreateTournamentRequest) (*CreateTournamentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTournament not implemented")
}
func (UnimplementedTournamentsServer) DeleteTournament(context.Context, *DeleteTournamentRequest) (*DeleteTournamentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTournament not implemented")
}
func (UnimplementedTournamentsServer) GetChannelURL(context.Context, *GetChannelURLRequest) (*GetChannelURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelURL not implemented")
}
func (UnimplementedTournamentsServer) mustEmbedUnimplementedTournamentsServer() {}

// UnsafeTournamentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TournamentsServer will
// result in compilation errors.
type UnsafeTournamentsServer interface {
	mustEmbedUnimplementedTournamentsServer()
}

func RegisterTournamentsServer(s grpc.ServiceRegistrar, srv TournamentsServer) {
	s.RegisterService(&Tournaments_ServiceDesc, srv)
}

func _Tournaments_CreateTournament_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTournamentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentsServer).CreateTournament(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tournaments_v1.Tournaments/CreateTournament",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentsServer).CreateTournament(ctx, req.(*CreateTournamentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tournaments_DeleteTournament_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTournamentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentsServer).DeleteTournament(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tournaments_v1.Tournaments/DeleteTournament",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentsServer).DeleteTournament(ctx, req.(*DeleteTournamentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tournaments_GetChannelURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentsServer).GetChannelURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tournaments_v1.Tournaments/GetChannelURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentsServer).GetChannelURL(ctx, req.(*GetChannelURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tournaments_ServiceDesc is the grpc.ServiceDesc for Tournaments service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tournaments_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tournaments_v1.Tournaments",
	HandlerType: (*TournamentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTournament",
			Handler:    _Tournaments_CreateTournament_Handler,
		},
		{
			MethodName: "DeleteTournament",
			Handler:    _Tournaments_DeleteTournament_Handler,
		},
		{
			MethodName: "GetChannelURL",
			Handler:    _Tournaments_GetChannelURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discord_bot.proto",
}

// DiscordManagerClient is the client API for DiscordManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscordManagerClient interface {
	AddDiscordServers(ctx context.Context, in *AddDiscordServersRequest, opts ...grpc.CallOption) (*AddDiscordServersResponse, error)
}

type discordManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscordManagerClient(cc grpc.ClientConnInterface) DiscordManagerClient {
	return &discordManagerClient{cc}
}

func (c *discordManagerClient) AddDiscordServers(ctx context.Context, in *AddDiscordServersRequest, opts ...grpc.CallOption) (*AddDiscordServersResponse, error) {
	out := new(AddDiscordServersResponse)
	err := c.cc.Invoke(ctx, "/tournaments_v1.DiscordManager/AddDiscordServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscordManagerServer is the server API for DiscordManager service.
// All implementations must embed UnimplementedDiscordManagerServer
// for forward compatibility
type DiscordManagerServer interface {
	AddDiscordServers(context.Context, *AddDiscordServersRequest) (*AddDiscordServersResponse, error)
	mustEmbedUnimplementedDiscordManagerServer()
}

// UnimplementedDiscordManagerServer must be embedded to have forward compatible implementations.
type UnimplementedDiscordManagerServer struct {
}

func (UnimplementedDiscordManagerServer) AddDiscordServers(context.Context, *AddDiscordServersRequest) (*AddDiscordServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDiscordServers not implemented")
}
func (UnimplementedDiscordManagerServer) mustEmbedUnimplementedDiscordManagerServer() {}

// UnsafeDiscordManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscordManagerServer will
// result in compilation errors.
type UnsafeDiscordManagerServer interface {
	mustEmbedUnimplementedDiscordManagerServer()
}

func RegisterDiscordManagerServer(s grpc.ServiceRegistrar, srv DiscordManagerServer) {
	s.RegisterService(&DiscordManager_ServiceDesc, srv)
}

func _DiscordManager_AddDiscordServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDiscordServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordManagerServer).AddDiscordServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tournaments_v1.DiscordManager/AddDiscordServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordManagerServer).AddDiscordServers(ctx, req.(*AddDiscordServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiscordManager_ServiceDesc is the grpc.ServiceDesc for DiscordManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscordManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tournaments_v1.DiscordManager",
	HandlerType: (*DiscordManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDiscordServers",
			Handler:    _DiscordManager_AddDiscordServers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discord_bot.proto",
}
